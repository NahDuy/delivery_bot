#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// Ch√¢n ƒëi·ªÅu khi·ªÉn ƒë·ªông c∆°
#define ENA 19
#define IN1 18
#define IN2 5
#define IN3 4
#define IN4 2
#define ENB 15

// C·∫£m bi·∫øn v√† c√≤i
#define IR_PIN 22
#define BUZZER_PIN 23

// WiFi v√† server
const char* ssid = "·ª¶n ·ªàn";
const char* password = "khongcho";
const char* ip = "192.168.79.159";
String serverUrl = "http://" + String(ip) + ":5000/orders";
String returnUrl = "http://" + String(ip) + ":5000/static/return_command.json";

// L∆∞u ƒë∆°n h√†ng tr∆∞·ªõc ƒë√≥
String lastTable = "";  // b·ªè d√πng
int lastOrderId = -1;
String lastDish = "";

// Thi·∫øt l·∫≠p ch√¢n ƒë·ªông c∆°
void setupMotors() {
  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
}

// Ki·ªÉm tra v·∫≠t c·∫£n
bool isObstacle() {
  return digitalRead(IR_PIN) == LOW;
}

// D·ª´ng ƒë·ªông c∆°
void stopMotors() {
  digitalWrite(ENA, LOW);
  digitalWrite(ENB, LOW);
}

// Ti·∫øn v·ªÅ tr∆∞·ªõc k√®m ki·ªÉm tra v·∫≠t c·∫£n
void moveForward(int duration_ms) {
  unsigned long startTime = millis();
  while (millis() - startTime < duration_ms) {
    if (isObstacle()) {
      Serial.println("‚õî V·∫≠t c·∫£n ph√≠a tr∆∞·ªõc! D·ª´ng l·∫°i v√† b√≠p c√≤i.");
      stopMotors();
      digitalWrite(BUZZER_PIN, HIGH);
      while (isObstacle()) {
        delay(100);
      }
      digitalWrite(BUZZER_PIN, LOW);
      Serial.println("‚úÖ ƒê∆∞·ªùng ƒë√£ th√¥ng. Ti·∫øp t·ª•c di chuy·ªÉn.");
    }

    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    digitalWrite(ENA, HIGH);
    digitalWrite(ENB, HIGH);
    delay(100);
  }
  stopMotors();
}

void turnLeft90() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  digitalWrite(ENA, HIGH);
  digitalWrite(ENB, HIGH);
  delay(500);
  stopMotors();
}

void turnRight90() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  digitalWrite(ENA, HIGH);
  digitalWrite(ENB, HIGH);
  delay(500);
  stopMotors();
}

void rotateInPlace(int degrees) {
  stopMotors();  // d·ª´ng h·∫≥n tr∆∞·ªõc khi quay
  delay(200);
  int duration = map(degrees, 0, 360, 0, 1190);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  digitalWrite(ENA, HIGH);
  digitalWrite(ENB, HIGH);
  delay(duration);
  stopMotors();
}

// Th·ª±c thi chu·ªói l·ªánh
void executeCommand(JsonArray cmds) {
  Serial.println("üöó B·∫Øt ƒë·∫ßu th·ª±c thi l·ªánh:");
  for (JsonObject cmd : cmds) {
    serializeJson(cmd, Serial);
    Serial.println();

    if (cmd.containsKey("T")) {
      int steps = cmd["T"];
      Serial.printf("‚û°Ô∏è Ti·∫øn %d b∆∞·ªõc\n", steps);
      for (int i = 0; i < steps; i++) moveForward(1000);
    } else if (cmd.containsKey("A")) {
      int deg = cmd["A"];
      Serial.printf("üîÑ Quay t·∫°i ch·ªó %d ƒë·ªô\n", deg);
      rotateInPlace(deg);
    } else if (cmd.containsKey("AL")) {
      Serial.println("‚Ü©Ô∏è R·∫Ω tr√°i 90 ƒë·ªô");
      turnLeft90();
    } else if (cmd.containsKey("AR")) {
      Serial.println("‚Ü™Ô∏è R·∫Ω ph·∫£i 90 ƒë·ªô");
      turnRight90();
    }
  }
}
void buzzerNotify() {
  for (int i = 0; i < 2; i++) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(200);
    digitalWrite(BUZZER_PIN, LOW);
    delay(200);
  }
}


void setup() {
  Serial.begin(115200);
  setupMotors();

  pinMode(IR_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);  // t·∫Øt c√≤i ban ƒë·∫ßu

  WiFi.begin(ssid, password);
  Serial.print("üîå ƒêang k·∫øt n·ªëi WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ K·∫øt n·ªëi WiFi th√†nh c√¥ng!");
}


void loop() {
  // Ki·ªÉm tra n·∫øu c√≥ l·ªánh quay v·ªÅ
  HTTPClient returnHttp;
  WiFiClient returnClient;
  returnHttp.begin(returnClient, returnUrl);
  int returnCode = returnHttp.GET();

  if (returnCode == HTTP_CODE_OK) {
  String returnPayload = returnHttp.getString();
  DynamicJsonDocument returnDoc(1024);
  DeserializationError returnErr = deserializeJson(returnDoc, returnPayload);
  if (!returnErr && returnDoc.is<JsonArray>()) {
    JsonArray returnPath = returnDoc.as<JsonArray>();

    if (returnPath.size() > 0) {
      Serial.println("üì¶ Nh·∫≠n l·ªánh quay v·ªÅ t·ª´ kitchen:");
      executeCommand(returnPath);
      buzzerNotify();  // B√≠p sau khi v·ªÅ ƒë·∫øn n∆°i

      // G·ªçi API ƒë·ªÉ x√≥a return_command
      HTTPClient clearHttp;
      String clearUrl = "http://" + String(ip) + ":5000/clear_return";
      clearHttp.begin(clearUrl);
      clearHttp.GET();
      clearHttp.end();
    }
  }
}




  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;
    http.begin(client, serverUrl);
    int httpCode = http.GET();

    if (httpCode == HTTP_CODE_OK) {
      String payload = http.getString();
      Serial.println("üì¶ JSON ƒë∆°n h√†ng:");
      Serial.println(payload);

      DynamicJsonDocument doc(2048);
      DeserializationError err = deserializeJson(doc, payload);
      if (err) {
        Serial.print("‚ùå L·ªói parse JSON ƒë∆°n h√†ng: ");
        Serial.println(err.c_str());
        return;
      }

      JsonArray orders = doc.as<JsonArray>();
      Serial.printf("üìã T·ªïng ƒë∆°n h√†ng: %d", orders.size());
      if (orders.size() > 0) {
        JsonObject last = orders[orders.size() - 1];
        int currentId = last["id"] | -1;
        String currentTable = last["table"].as<String>();
        String currentDish = last["dish"].as<String>();

        Serial.printf("üßæ B√†n: %s | M√≥n: %s", currentTable.c_str(), currentDish.c_str());

        if (currentId != lastOrderId) {
          Serial.println("‚úÖ C√≥ ƒë∆°n m·ªõi, th·ª±c thi...");

          if (last["commands"].is<JsonArray>()) {
            JsonArray commands = last["commands"].as<JsonArray>();
            Serial.println("‚ñ∂Ô∏è L·ªánh ƒëi t·ªõi:");
            serializeJson(commands, Serial);
            Serial.println();
            executeCommand(commands);
            buzzerNotify();  // B√≠p b√°o kh√°ch sau khi giao h√†ng

          } else {
            Serial.println("‚ùå 'commands' kh√¥ng ph·∫£i m·∫£ng JSON h·ª£p l·ªá!");
          }

          Serial.println("‚è≥ ƒêang ch·ªù l·ªánh quay v·ªÅ t·ª´ kitchen (th·ªß c√¥ng)...");
          lastTable = currentTable;
          lastDish = currentDish;
          lastOrderId = currentId;
        } else {
          Serial.println("üîÅ ƒê∆°n h√†ng c≈©, b·ªè qua.");
        }
      }
      http.end();
    }
  }

  delay(5000);
}
